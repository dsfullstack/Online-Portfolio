{"version":3,"sources":["editable-stuff/SumanCv.pdf","assets/rotary.png","assets/mhealth.png","assets/fea1.png","assets/ios.png","assets/tictoe.png","components/MainBody.jsx","components/AboutMe.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainBody","icons","Configs","useState","devIntro","devInfo","devDesc","hoverstatus","setHoverstatus","toggleHover","data","newhoverStatus","event","icon","id","className","map","key","target","rel","href","url","aria-label","image","split","onMouseOver","onMouseOut","role","AboutMe","heading","aboutDev","instaProfilePic","setInstaProfilePic","showInstaProfilePic","showInsta","setShowInsta","Pdf","resumeURL","useEffect","handleRequest","e","axios","get","instaLink","instaUsername","instaQuerry","then","response","graphql","user","profile_pic_url_hd","catch","error","console","message","finally","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.556eeacf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SumanCv.388f45a4.pdf\";","module.exports = __webpack_public_path__ + \"static/media/rotary.fba49fb4.png\";","module.exports = __webpack_public_path__ + \"static/media/mhealth.d005e82d.png\";","module.exports = __webpack_public_path__ + \"static/media/fea1.2364ae1a.png\";","module.exports = __webpack_public_path__ + \"static/media/ios.e4372950.png\";","module.exports = __webpack_public_path__ + \"static/media/tictoe.086cba9f.png\";","import React, { useState } from \"react\";\r\nimport Typist from \"react-typist\";\r\nimport \"../App\";\r\nimport Configs from \"../editable-stuff/configurations.json\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\nconst MainBody = () => {\r\n  const icons = Configs.icons;\r\n\r\n  // const [backgroundType, setBackgroundType] = useState(Configs.backgroundType);\r\n  const [devInfo] = useState(Configs.devIntro);\r\n  const [devDesc] = useState(Configs.devDesc);\r\n  const [hoverstatus, setHoverstatus] = useState([\r\n    \"socialicons\",\r\n    \"socialicons\",\r\n    \"socialicons\",\r\n    \"socialicons\"\r\n  ]);\r\n\r\n  const toggleHover = data => {\r\n    const newhoverStatus = [...hoverstatus];\r\n\r\n    if (data.event === \"enter\") {\r\n      newhoverStatus[data.icon.id] = \"socialiconshover\";\r\n      return setHoverstatus(newhoverStatus);\r\n    } else if (data.event === \"leave\") {\r\n      newhoverStatus[data.icon.id] = \"socialicons\";\r\n      return setHoverstatus(newhoverStatus);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n       <div id=\"title\">\r\n      <div id=\"stars\"></div>\r\n      {/* <div id=\"stars2\"></div>\r\n      <div id=\"stars3\"></div> */}\r\n    </div>\r\n      <div\r\n        id=\"divmainbody\"\r\n        className=\"jumbotron jumbotron-fluid bg-transparent bgstyle text-light min-vh-100 d-flex align-content-center align-items-center flex-wrap m-0\"\r\n      >\r\n        <div className=\"container container-fluid text-center \">\r\n          <h1 className=\"d-none d-md-block display-1\">{devInfo}</h1>\r\n          <h1 className=\"d-md-none\">{devInfo}</h1>\r\n          <Typist className=\"lead\"> {devDesc}</Typist>\r\n          <div className=\"p-5\">\r\n            {icons.map(icon => (\r\n              <a\r\n                key={icon.id}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                href={icon.url}\r\n                aria-label={`My ${icon.image.split(\"-\")[1]}`}\r\n              >\r\n                <i\r\n                  className={`fab ${icon.image}  fa-3x ${hoverstatus[icon.id]}`}\r\n                  onMouseOver={() => toggleHover({ icon, event: \"enter\" })}\r\n                  onMouseOut={() => toggleHover({ icon, event: \"leave\" })}\r\n                />\r\n              </a>\r\n            ))}\r\n          </div>\r\n          <a\r\n            className=\"btn btn-outline-light btn-lg\"\r\n            href=\"#aboutme\"\r\n            role=\"button\"\r\n            aria-label=\"Learn more about me\"\r\n          >\r\n            More about me\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainBody;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Configs from \"../editable-stuff/configurations.json\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport Pdf from \"../editable-stuff/SumanCv.pdf\";\r\n\r\nconst AboutMe = () => {\r\n  const [heading] = useState(\"About me\");\r\n  const [aboutDev] = useState(Configs.aboutDev);\r\n  const [instaProfilePic, setInstaProfilePic] = useState(\"\");\r\n  const [showInsta, setShowInsta] = useState(Configs.showInstaProfilePic);\r\n  const [resumeURL] = useState(Pdf);\r\n\r\n  useEffect(() => {\r\n    if (showInsta) {\r\n      handleRequest();\r\n    }\r\n  }, [showInsta]);\r\n\r\n  const handleRequest = e => {\r\n    axios\r\n      .get(Configs.instaLink + Configs.instaUsername + Configs.instaQuerry)\r\n      .then(response => {\r\n        // handle success\r\n        // console.log(response.data.graphql);\r\n        return setInstaProfilePic(\r\n          response.data.graphql.user.profile_pic_url_hd\r\n        );\r\n      })\r\n      .catch(error => {\r\n        // handle error\r\n        setShowInsta(false);\r\n        return console.error(error.message);\r\n      })\r\n      .finally(() => {\r\n        // always executed\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div id=\"aboutme\" className=\"jumbotron jumbotron-fluid m-0\">\r\n      <div className=\"container container-fluid p-5\">\r\n        <div className=\"row\">\r\n          {showInsta && (\r\n            <div className=\"col-5 d-none d-lg-block align-self-center\">\r\n              <img\r\n                className=\"border border-secondary rounded-circle\"\r\n                src={instaProfilePic}\r\n                alt=\"profilepicture\"\r\n              />\r\n            </div>\r\n          )}\r\n          <div className={`col-lg-${showInsta ? \"7\" : \"12\"}`}>\r\n            <h1 className=\"display-4 mb-5 text-center\">{heading}</h1>\r\n            <p className=\"lead text-center\">{aboutDev}</p>\r\n            {resumeURL && (\r\n              <p className=\"lead text-center\">\r\n                <a\r\n                  className=\"btn btn-outline-dark btn-lg\"\r\n                  href={Pdf}\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer noopener\"\r\n                  role=\"button\"\r\n                  aria-label=\"Resume/CV\"\r\n                >\r\n                  Resume\r\n                </a>\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutMe;\r\n","import React, { Fragment } from \"react\";\r\nimport MainBody from \"./components/MainBody\";\r\nimport AboutMe from \"./components/AboutMe\";\r\nimport Project from \"./components/Project\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nconst App = () =>  (\r\n  <Fragment>\r\n    <MainBody />\r\n    <AboutMe />\r\n    {/* <Project /> */}\r\n    {/* <Footer /> */}\r\n  </Fragment>\r\n);\r\n  \r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can\"t reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}